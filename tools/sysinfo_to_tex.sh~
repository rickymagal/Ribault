#!/usr/bin/env bash
set -euo pipefail
IN="${1:-machine_info.txt}"
OUT="${2:-experimental_setup.tex}"

grab() { grep -m1 -F "$1" "$IN" | sed -E "s/.*$1[[:space:]]*:?[[:space:]]*//"; }
grabre() { grep -m1 -E "$1" "$IN" | sed -E "s/.*$1[[:space:]]*:?[[:space:]]*//"; }

cpu_model="$(grab 'Model name')"
cpu_family="$(grab 'CPU family')"
cpu_modelnum="$(grab 'Model:')"
cpu_stepping="$(grab 'Stepping')"
sockets="$(grab 'Socket(s)')"
cores_per_socket="$(grab 'Core(s) per socket')"
threads_per_core="$(grab 'Thread(s) per core')"
cpus_logical="$(grab 'CPU(s):')"
l1d="$(grab 'L1d cache')"; l1i="$(grab 'L1i cache')"
l2="$(grab 'L2 cache')";  l3="$(grab 'L3 cache')"
isa_flags="$(grab 'Flags:')"
min_mhz="$(grab 'CPU min MHz')"; max_mhz="$(grab 'CPU max MHz')"

numa_nodes="$(grab 'NUMA node(s)')"
mem_total="$(awk '/^Mem:/ {print $2}' "$IN" | head -n1)"
ram_type="$(grep -m1 -i '^\s*Type:' "$IN" | awk '{print $2}')"
ram_speeds="$(grep -i 'Configured Memory Speed' "$IN" | sed -E 's/.*: *//;' | sort -u | tr '\n' ' ' )"
if [ -z "$ram_speeds" ]; then
  ram_speeds="$(grep -i '^ *Speed:' "$IN" | sed -E 's/.*: *//;' | sort -u | tr '\n' ' ')"
fi

os_name="$(grep -m1 '^PRETTY_NAME=' "$IN" | sed -E 's/^PRETTY_NAME="?([^"]*)"?/\1/')"
kernel="$(grep -m1 '^Linux ' "$IN" | awk '{print $3}')"

gov_driver="$(grab 'driver:')"
gov_mode="$(grab 'governor:')"
no_turbo="$(grab 'intel_pstate.no_turbo:')"
boost="$(grab 'cpufreq.boost:')"
turbo_state="unknown"
if [ "$no_turbo" = "1" ] || [ "$boost" = "0" ]; then turbo_state="off"; fi
if [ "$no_turbo" = "0" ] || [ "$boost" = "1" ]; then turbo_state="on"; fi

gcc_ver="$(grep -m1 -E '^gcc ' "$IN" | sed 's/ (.*//')"
clang_ver="$(grep -m1 -E '^clang version' "$IN")"
ld_ver="$(grep -m1 -E '^GNU ld' "$IN")"
glibc_ver="$(grep -m1 -E '^ldd ' "$IN")"
ghc_ver="$(grep -m1 -E 'Glasgow Haskell|^ghc ' "$IN" || true)"

# Derived
phys_cores="NA"
if [[ "$sockets" =~ ^[0-9]+$ ]] && [[ "$cores_per_socket" =~ ^[0-9]+$ ]]; then
  phys_cores=$(( sockets * cores_per_socket ))
fi
smt_state="off"; [ "${threads_per_core:-1}" -gt 1 ] && smt_state="on"

# ISA summary
isa_summary=""
echo "$isa_flags" | grep -qw avx512 && isa_summary="AVX-512"
echo "$isa_flags" | grep -qw avx2 && isa_summary="${isa_summary:+$isa_summary, }AVX2"
echo "$isa_flags" | grep -qw sse4_2 && isa_summary="${isa_summary:+$isa_summary, }SSE4.2"
[ -z "$isa_summary" ] && isa_summary="(see full flags)"

# Repo commits (optional, show all lines found)
repos="$(grep -E '^Current repo:' "$IN" | sed 's/^Current repo: //')"
[ -z "$repos" ] && repos="(provide Ribault and Trebuchet commit hashes)"

cat > "$OUT" <<EOF
\paragraph{Hardware.}
CPU: \emph{$cpu_model} (family $cpu_family, model $cpu_modelnum, stepping $cpu_stepping); $sockets socket(s),
$phys_cores physical cores, $cpus_logical threads (SMT $smt_state, $threads_per_core thread(s)/core).
Base/boost: min $min_mhz~MHz, max $max_mhz~MHz.
Caches: L1d $l1d, L1i $l1i, L2 $l2, L3 $l3.
ISA: $isa_summary.
Memory: $mem_total total; type $ram_type; configured speed(s): $ram_speeds
Topologia NUMA: $numa_nodes node(s).

\paragraph{Software.}
$os_name, kernel \texttt{$kernel}.
Toolchain: \texttt{$gcc_ver}; \texttt{$clang_ver}; \texttt{$ld_ver}; \texttt{$glibc_ver}.
$([ -n "$ghc_ver" ] && printf 'GHC: \\texttt{%s}.\n' "$ghc_ver")
CPUfreq: driver \texttt{$gov_driver}, governor \texttt{$gov_mode}, turbo $turbo_state.

\paragraph{Runtime / Artifacts.}
Repos: $repos.
EOF

echo "Wrote $OUT"
