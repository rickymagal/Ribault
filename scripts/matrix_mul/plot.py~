#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse, os, csv
from collections import defaultdict
import matplotlib.pyplot as plt

def load_metrics(path):
    # expects header: N,P,rep,seconds,rc
    rows = []
    with open(path, newline="") as f:
        rdr = csv.DictReader(f)
        for r in rdr:
            try:
                rc = int(r["rc"])
                if rc != 0:  # ignore failed runs
                    continue
                rows.append({
                    "N": int(r["N"]),
                    "P": int(r["P"]),
                    "rep": int(r["rep"]),
                    "seconds": float(r["seconds"]),
                })
            except Exception:
                pass
    return rows

def aggregate(rows):
    # mean seconds per (N,P)
    agg = defaultdict(list)
    for r in rows:
        agg[(r["N"], r["P"])].append(r["seconds"])
    mean = {}
    for k, xs in agg.items():
        mean[k] = sum(xs)/len(xs)
    return mean

def plot_runtime(mean, outdir, tag):
    # group by N -> curve across P
    byN = defaultdict(list)
    for (N, P), t in mean.items():
        byN[N].append((P, t))
    for N in byN:
        byN[N].sort(key=lambda x: x[0])

    plt.figure()
    for N, pts in sorted(byN.items()):
        Ps  = [p for p,_ in pts]
        Ts  = [t for _,t in pts]
        plt.plot(Ps, Ts, marker="o", label=f"N={N}")

    plt.title("Matrix Multiplication â€” Runtime vs Processor Count")
    plt.xlabel("Processor count (P)")
    plt.ylabel("Runtime (seconds)")
    plt.grid(True, which="both", linestyle="-", alpha=0.35)
    plt.legend(title="Problem size", loc="best")
    os.makedirs(outdir, exist_ok=True)
    png = os.path.join(outdir, f"plot_runtime_{tag}.png")
    pdf = os.path.join(outdir, f"plot_runtime_{tag}.pdf")
    plt.tight_layout()
    plt.savefig(png, dpi=160)
    plt.savefig(pdf)
    print(f"[plot] wrote {png} and {pdf}")

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--metrics", required=True)
    ap.add_argument("--outdir", required=True)
    ap.add_argument("--tag", required=True)
    args = ap.parse_args()
    rows = load_metrics(args.metrics)
    mean = aggregate(rows)
    plot_runtime(mean, args.outdir, args.tag)

if __name__ == "__main__":
    main()
