-- concatena duas listas
append xs ys = case xs of
  []      -> ys;
  (h:t)   -> h : append t ys;;

-- testa se x ∈ xs
elem x xs = case xs of
  []      -> False;
  (h:t)   -> if x == h then True else elem x t;;

-- busca lista de adjacência de u em graph :: [(Int,[Int])]
lookupAdj u graph = case graph of
  []               -> [];
  ((v,adj):rs)     -> if u == v then adj else lookupAdj u rs;;

-- dfsAux: (grafo, pilha, visitados) → lista de visitados (pré-ordem)
dfsAux graph stack visited = case stack of
  []      -> visited;
  (u:us)  ->
    if elem u visited
      then dfsAux graph us visited
      else dfsAux graph
                    (append (lookupAdj u graph) us)
                    (u : visited);;

-- dfs: inicia busca em profundidade a partir de root
dfs graph root = dfsAux graph [root] [];;

-- main: exemplo de grafo e chamada
main = dfs
  [ (1,[2,3])
  , (2,[4])
  , (3,[4,5])
  , (4,[])
  , (5,[1])
  ]
  1;;
