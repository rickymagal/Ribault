-- ===============================================================
--  MatrixMul.hsk  –  multiplicação de matrizes (Float)
-- ===============================================================

-- nº de processadores (seu script altera este valor)
p x = 8;

-- 1. utilidades --------------------------------------------------

heads xss = case xss of
  []             -> [];
  ((x:_):xss1)   -> x : heads xss1;
;

tails xss = case xss of
  []               -> [];
  ((_ : xs):xss1)  -> xs : tails xss1;
;

append xs ys = case xs of
  []      -> ys;
  (h:ts)  -> h : append ts ys;
;

len xs = case xs of
  []      -> 0;
  (_:ys)  -> 1 + len ys;
;

takeN k xs = if k <= 0 then [] else case xs of
  []      -> [];
  (y:ys)  -> y : takeN (k - 1) ys;
;

dropN k xs = if k <= 0 then xs else case xs of
  []      -> [];
  (_:ys)  -> dropN (k - 1) ys;
;

splitAtN k xs = (takeN k xs, dropN k xs);

-- 2. transposição -----------------------------------------------

transpose xss = case xss of
  []     -> [];
  (_:_)  ->
    let hs = heads xss in
    hs : transpose (tails xss);
;

-- 3. produto escalar (Float) ------------------------------------

dot xs ys = case xs of
  []        -> 0.0;
  (x:xs1)   -> case ys of
    []        -> 0.0;
    (y:ys1)   ->
      let xf = x * 1.0 in
      let yf = y * 1.0 in
      (xf * yf) + dot xs1 ys1;;
;

-- 4. linha × matriz transposta ----------------------------------

rowTimes row colsT = case colsT of
  []      -> [];
  (c:cs)  ->
    let h  = dot row c in
    let ts = rowTimes row cs in
    h : ts;
;

-- 5. multiplicação sequencial ----------------------------------

mmult rows colsT = case rows of
  []       -> [];
  (r:rs1)  ->
    let h  = rowTimes r colsT in
    let ts = mmult rs1 colsT in
    h : ts;
;

-- 6. multiplicação paralela guiada por p -----------------------

mmultPar rows colsT =
  let n     = len rows in
  let cores = p 0 in
  let k0    = n / cores in
  let k     = if k0 <= 0 then 1 else k0 in
  if n <= k
  then mmult rows colsT
  else
    case splitAtN k rows of
      (lhs, rhs) ->
        let left  = mmultPar lhs colsT in
        let right = mmultPar rhs colsT in
        append left right;
;

matrixMul a b = mmultPar a (transpose b);

-- 7. exemplo de uso ---------------------------------------------

main =
  let a = [[1.0, 2.0], [3.0, 4.0]] in
  let b = [[5.0, 6.0], [7.0, 8.0]] in
  matrixMul a b;
