-- Um grafo de exemplo: lista de pares (vértice, lista de vizinhos)
graph = [(1,[2,3]);
         (2,[4]);
         (3,[4,5]);
         (4,[]);
         (5,[])]
;

-- lookupGraph: dado um grafo e um nó x, retorna sua lista de vizinhos
lookupGraph g x = case g of
  []            -> [];
  ((a,b):gs)    ->
    if x == a
      then b
      else lookupGraph gs x
;

-- elem: testa se x está em xs
elem x xs = case xs of
  []      -> False;
  (y:ys)  ->
    if x == y
      then True
      else elem x ys
;

-- append: concatena duas listas
append xs ys = case xs of
  []      -> ys;
  (z:zs)  -> z : append zs ys
;

-- filterNotVisited: filtra de xs só os elementos que NÃO estão em visited
filterNotVisited xs visited = case xs of
  []      -> [];
  (z:zs)  ->
    if elem z visited
      then filterNotVisited zs visited
      else z : filterNotVisited zs visited
;

-- bfsRec: fila de nós a visitar + lista de já visitados
bfsRec queue visited = case queue of
  []      -> visited;
  (n:ns)  ->
    let nbrs     = lookupGraph graph n;
        news     = filterNotVisited nbrs visited;
        queue'   = append ns news;
        visited' = append visited news
    in bfsRec queue' visited'
;

-- bfs: inicializa a fila e o visited com o nó de partida
bfs start = bfsRec [start] [start];

-- main: exemplo começando em 1
main = bfs 1
