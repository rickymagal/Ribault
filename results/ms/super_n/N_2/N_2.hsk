-- Merge Sort in the subset of the compiled functional language
-- Agora tudo é finalizado com ";". Quando o subvetor ficar com
-- tamanho <= (tamanhoOriginal / p), chamamos a SUPER (p = 4).

-- length
len xs = case xs of
  []      -> 0;
  (_:ys)  -> 1 + len ys;
;

-- Merge two sorted lists into a single sorted list
merge xs ys = case xs of
  []      -> ys;
  (x:xt)  -> case ys of
    []       -> xs;
    (y:yt)   -> if x <= y
                then x : merge xt ys
                else y : merge xs yt;;
;
 
-- Split a list into two approximately equal halves
split lst = case lst of
  []     -> ([], []);
  [x]    -> ([x], []);
  x:y:zs -> case split zs of
    (xs, ys) -> (x:xs, y:ys);;
;

-- divisor do threshold
p = 4;

-- Função de entrada: calcula N0 e chama a versão com threshold
mergeSort0 lst = mergeSortT (len lst) lst;

-- Merge Sort com fallback para SUPER quando sublista <= N0 / p
mergeSortT n0 lst = case lst of
  []     -> [];
  (x:[]) -> [x];
  _      -> if (len lst) <= (n0 / p)
            then super single input (lst) output (sorted)
                 #BEGINSUPER
                 -- Haskell: insertion sort para listas pequenas
                 insert x [] = [x]
                 insert x (y:ys)
                   | x <= y    = x:y:ys
                   | otherwise = y : insert x ys
                 isort []     = []
                 isort (h:t)  = insert h (isort t)
                 sorted = isort lst
                 #ENDSUPER
            else case split lst of
              (left, right) ->
                merge (mergeSortT n0 left) (mergeSortT n0 right);;
;

-- Exemplo
main = mergeSort0 [[670487,116739]];